---------------------------------
Final Exam Review
(QA with Kirsten)

Copy Constructors and Assignment Operators with Inheritance
    (Preventing slicing or mixed assignment)

    class Abstract {
        protected:
            int field1;
            int field2;
            ~Abstract()=0;
    };

    class Derived : public Abstract {
        int *field3;
    }

    Derived (const Derived &d) 
        : Abstract(d->abstract) {

    }

    Note: Polymorphism works as long as you don't instantiate the superclass.
        We can't convert one type of Book to, say, a Comic.
        So make Book virtual and use Book pointers as polymorphic pointers that
         can represent any of Book's subclasses.

    Abstract *a = new Student; // Student constructor is called, only a pointer is returned.
        // We don't need a copy constructor implemented for the Abstract class.
    Note: Abstract a = Student; // Probably isn't valid, because we would end up with a virtual object instance.

Factory Design Pattern
    UML:
        Factory
            Factory1
                Creates Things
            Factory2

        Thing (Abstract)
            Thing1
                Constructors
                Destructors
                etc.
            Thing2

    Factory1::getThing() {
        generateNumber(); // Count amount of Things created?
        if (conditionForThing1) {
            Thing *t = new Thing1;
            return t;
        } else {
            return new Thing2;
        }
    }

    Note: Factory doesn't have an arrow to any Thing in the UML.
        Factory simply returns a Thing but never OWNS A or HAS A Thing.
    Note: This lets us have a very simple main file and create various Things
     with our factory on the fly with a method call.
    Note: We could combine singleton with factory so that we only
     have one factory, but this isn't always beneficial.

Foward Declaration
    All we need to do if we don't need to know the size of an object.
        e.g.
            Pointers to a class.
            Reference to a class.
        But not
            Inheriting from a class,
            or passing an argument by value

Visitor Design Pattern
    e.g.
        Note: Slightly tweaked from usual visitor pattern.
        We have three handler methods each with one argument. /* Need to clarify -JR */
        The design of this example may require a bunch of methods, but it's easily expandable!
    UML:
        Form
        + attack(Form *) // Could also be references or objects
        + defend(Rock *)
        + defend(Paper *)
        + defend(Scissors *)
            Rock
            Paper
            Scissors

    void Rock::attack(Form *f) {
        f->defend(this);
    }

    int main() {
        Form *me = new Rock;
        Form *enemy = new Paper;
        me->attack(enemy);
    }

    Note: Form *me; // Must be one of our forms.
        So an array of Form pointers should still dynamically dispatch properly

Bridge and pImpl
    pImpl
        I have a bunch of private fields, but we don't really need to see all of them.
        So let's take all of these private fields and store them in a separate class,
         a class for the implementation, then store a Pointer to the Implementation (pImpl)
        So pImpl just uses a private pointer to the implementation.
        So we don't say "give me Object->x" where x is private.
            We saw it defined but couldn't access it! Argh!
        May also require a few getters and setters to manipulate settings inside the Implementation.
        Note: If we modify the Implementation, we won't have to recompile the superclass,
         since the superclass only contains a pointer to that Implementation.

    Bridge
        Storing a pointer to some other class, like in pImpl, but we abstract away multiple implementations
        e.g.
            Game
            - Window *w

            Window
            + display()
            + drawRectangle()
                OSXWin : public Window
                + display()
                + drawRectangle()
                PCWin : public Window
                + display()
                + drawRectangle()
                LinuxWin : public Window
                + display()
                + drawRectangle()

            So we can to Game->w->draw() regardless of which implementation the Window pointer was set up with.
            Note: We should probably say that Game OWNS A Window, so that the Window is deleted when Game is deleted.

        As a result, we have one interface that we can reuse with various implementations!

OWNS A vs HAS A
    HAS A
        Doesn't delete the things it has when deleted.
        e.g.
            Flood It cells don't need to delete its neighbours when it is deleted,
             since the Grid handles deletion of all the Cells.
    OWNS A
        Deletes objects it owns when it deletes.
        e.g.
            Grid OWNS Cells (and deletes them when Grid is being deleted)
        e.g.
            A Person OWNS their organs, which disappear after death,
             but a Person HAS possessions, which can be given away and reused after death.

Auto Pointers
    auto_ptr<int> n = new int(10);
    auto_ptr<int> m = n; // n is now NULL
    return m;

    Note: auto_ptr<int> iArray = new int[10]; delete iArray; // Only deletes the first element!
        (But ints are base types and C++ takes care of those, but only deleting the first elemnt would cause problems for other objects)
        We don't call 'delete []' on an auto_ptr, only 'delete'!
        So, we should never make an auto pointer point to an array!

    Left as an exercise:
        What happens when we do the following:
            auto_ptr< auto_ptr<int> > n = new int(42);

Template Method
    class Turtle {
        virtual void drawShell()=0;
        virtual void drawFeet();
        virtual void drawHead();
        public:
        void drawTurtle() {
            drawHead();
            drawFeet();
            drawShell();
        }

    class Blue : public Turtle {
        virtual void drawShell() {
            drawSemiCircle("blue");
        }
    }

    Note: If we try to implement drawFeet in the Blue class, it will never be called in Turtle::drawTurtle.
    Note: 'virtual' is not required above in the header 'virtual void drawShell();', it's just a nice sanity check for maintainability.
    "The template pattern thus works kind of like a wrapper function."

Off on a tangent:
    We don't need to know this for the exam, this is more to do with mltiple inheritance (which wasn't covered in class).

    class A {
      protected:
        int data;
    }

    class B : public A {
        string data;
    }

    B b;
    b.data; // returns string
    b.A::data; // returns the int?

Standard Template Library
    Know what iterators are.
    Know what end, rend, push_back, etc. do.
    Know what maps and vectors are.

Partial and Mixed Assignment
    e.g.
        Catching aa bad_cast exception as a generic Exception e.
    e.g.
        Throwing a Textbook and catching as a Book.
            Will splice off the TextBook part of the TextBook.

Note: Understand why you need to recompile some things but not others according to dependencies.
    (This is what a Makefile does)
    We might want to review Makefiles before the final.

Exception Handling

    Study the three levels of exception safety (RAII).
    Study how the stack unwinds as exceptions are thrown up the levels.
        If not caught by main, the program crashes.

    Basic Guaruntee:
        Code is still in a valid state that we can deal with, but something bad happened if we throw.
    Strong Guaruntee:
        Basic + If we throw, everything is in the same state as it was before (atomic).
    No-Throw Guaruntee:
        Strong + Basic + Exceptions won't be thrown.
        The function always succeeds!

    Note: If we throw something and the program is no longer in a valid state, we don't have a name for that.
        No gurauntee!

    Note: Assignment operator with copy-and-swap should be no-throw guarunteed.
        Otherwise if we assign all of our memory before changing our object, we have a strong guaruntee.
    
    try {
        ...
        ___ s;
        throw s;
    } catch (int n) {

    } (string s) {

    } catch (TextBook &t) {

    } catch (...) { // catch anything else

    }
    // other code

    Note: Splicing happens when we catch a TextBook with 'catch (Book b)'.
    Note: 'throw;' just rethrows whatever we just caught.

Coupling and Cohesion
    Two classes that are (highly/closely) coupled:
        Rely on each others' implementations.
        We want low coupling so that we can easily change things.

    A module with high cohesion:
        Everything within that module/class/structure has a similar purpose.
        We want everything related to be in one spot.
        We want high cohesion

    "Remember: Couples are gross, so we want low coupling."

    /* A pneumonic: (L)ow coup(L)ing, (H)igh co(H)esion -JR */
