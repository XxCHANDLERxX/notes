-----------------------------------
Lecture 3

Pipes
    last class:
        head -20 sample.txt | wc -w

    Equivalent to:

        head -20 sample.txt > temp.txt
        wc -w temp.txt

    The benefit of using pipes is to prevent using time/memory to write output to the disk.

How to pass the output of a program as an argument to another program.
    e.g. $ echo Today is date and I am whoami
    --> Today is date and I am whoami

    Put command in back-quotes (under tilde): Today is `date` and I am `whoami`
        7 words act like 7 arguments passed to echo.
    Also valid: echo "Today is `date`" (shell can execute commands in double quotes)
                echo Today is $(date)  (this syntax has the advantage of nesting without messy escaping)

Pattern Matching Inside Files
    Tool: grep (Global Regular Expression Pattern) (outdated)
          egrep (Extended '''), equivalent to grep -E

        Usage: $ egrep pattern file
        Output: lines in file that match the pattern

        e.g. Find all occurences of cs246 in index.shtml
              $ egrep cs246 index.shtml
              --> All lines of html containing substring "cs246"
        
        Find occurences of 'CS246' or 'cs246'
        Student: {CS,cs}, egrep -e?
        OR '|': egrep cs246|CS246 index.shtml --> bash interprets this as a pipe!
            Use quotes: egrep 'cs246|CS246' index.shtml
            Or, alternatively:
            egrep "(CS|cs)246" index.shtml
            egrep "(c|C)(s|S)246"

Use Regular Expressions
    e.g. lines that contained cs246 OR CS246
        "cs246|CS246"
        ===
        "(cs|CS)246"
        !==
        "(c|C)(s|S)246"

    a|b|c|d (a or b or c or d)
    Instead, use square brackets: [abcd]
        This chooses one character from this set.
    Ranges: [0-9]
        This chooses one digit from 0 to 9.

    All characters except certain characters: [^abcd]
        Any one character *except* a character from this set.

    e.g. What if we want an optional space between cs and 246?
        '?' is used to indicate 0 or 1 of the preceeding expression.
            $ egrep "cs( )?246" index.shtml
                Equivalent to: "cs ?246" without parenthesis, the preceeding expression/character is used (but brackets are encouraged)

    '*' is used to indicate 0 or more of the preceeding expression.
        e.g. egrep "(cs)*246" index.shtml
            --> 'cs246', '246', 'cscs246', 'cscscs246', ...
        If one line is matched it gets printed regardless of multiple matching cases.
        Cases regarding smallest/biggest matches, 'greedy' matching algorithms (largest match) are discussed in cs240.

    How do you find a '*' or a '?'?
        Escape it using '\'.
        e.g. "cs\?246"
            This escapes the special symbols (anything that has meaning within a regex)

        Remember - "Am I writing a globbing pattern or a regex?"
            Globbing pattern: '*' matches anything
            Regex: match 0 or more

    Dot ('.') matches any one symbol.
        e.g. egrep "cs.*246" index.shtml
            This matches ~~~cs~~~~~~246~~~, e.g. 'FOOcs246BAR'

    Carat ('^') (outside brackets) matches patterns at the beginning of the line.
        e.g. "^cs246"
            This gives all lines that start with cs246.

    Dollar ('$') matches ending characters.
        e.g. egrep "cs246$"
            This gives all lines that start with cs246.
        e.g. egrep "^cs246$"
            This gives all lines that contain exactly this string.

    Plus ('+') matches one or more of the preceeding expression.
        e.g. egrep ".+" index.shtml
            This prints all non-empty lines.

    *Note that there is a difference tbd between single and double quotes.

Useful egrep switches:
    Print all words of even length from /usr/share/dict/words
        Incorrect: $ egrep "(..)+" /usr/share/dict/words
            This returns all lines, since this isn't starting at the beginning of the line. All even substrings get found!
        Correct: $ egrep "^(..)+$" /usr/share/dict/words

    *Don't forget ^$ on the assigment!

    Print all files in the current directory whose name contain exactly one 'a'.
        $ ls | egrep "^[^a]*a[^a]*$"

    Print all words in /usr/share/dict/words that starts with an e and has length 5.
        $ egrep "^e....$" /usr/share/dict/words

----------
$ egrep -i
    This ignores case

$ egrep ./*
    Globs all files in directory.

$ egrep -R
----------

File Permissions
    $ ls -l
        Long listing that gives additional information on each file.
            Contains permissions strings!
        -rw-r--r-- 1 nanaeem staff 10K [Date Modified] [Filename]
                   ^ indicates number of symbolic links to this file
                        if this is a directory, indicates number of files within + number of sym links to the dir
                        'all references to this file'
                     ^^^^^^^ owner
                              ^^^^^ group
                                     ^^^ size
            '-' indicates ordinary file
            'd' indicates directory
            'l' indicates symbolic link (shortcuts)

    Group: way to share files in linux.
        A linux user can belong to many groups.
        A file can belong to one group.

        Permission: 3 groups of 3 bits
            User bits, group bits, other bits
            r -> read or set to '-'.
                File: read (cat, etc.). Directory: read contents of directory (ls, etc.).
            w -> write or set to '-'.
                File: write (vi, etc.). Directroy: modify contents (add/remove files, etc.).
            x -> execute or set to '-'.
                File: treat a file as a program and try to run it. Directory: you can enter that directory (cd, etc.).
            All On: rwxrwxrwx
            All Off: ---------
            Read, write, execute
        e.g. -rw-r--r-x
            Owners (user) can read and write, group can read, others can read and execute.
        chmod
