CS241 Midterm Review Session

Topics:

    Bits and bytes
    Assembly language programming
    Assembling and Linking
    Regular languages
    Contex-free languages

Bits, Bytes, and Words

    Bits: ones and zeroes
    Bytes: 8 bits
    Words: 4 bytes

    Range of 2's compliment: [-2^(k-1), 2^(k-1) - 1]
    Range of unsigned: [0, 2^k - 1

    Convert -25 to an 8-bit 2's compliment:

        Method 1: Find binary of +25, and then find the negation (flip bits and
                  add 1).

                  25: 00011001
                  Flip bits -> 11100110
                  Add 1 -> 11100111

Assembly Language Programming

    Write a procedure that accomplishes  the following:

    Input: $1 = n (1 <= n <= 10)
    Output: $3 = n!

    Note: We will write the logic before encapsulating the procedure in the
    necessary boilerplate.

    add $2, $1, $0      ; $2 := n
    lis $4
    .word 1
    add $3, $4, $0      ; $3 := 1
    loop:
      mult $3, $2
      mflo $3           ; $3 := product
      sub $2, $2, $1    ; decrement n
      bne $2, $0, loop
    jr $31              ; we ALWAYS need to return, even if question doesn't ask

    Now, let's encapsulate this program in a procedure named factorial.

    factorial:
      sw $2, -4($30)      ; -4 because free ram is above sp (towards 0x0)
      sw $4, -8($30)
      lis $2
      .word 8
      sub $30, $30, $2    ; decrement sp
      ; ...
      ; (main logic from above)
      ; ...
      lis $2
      .word 8
      add $30, $30, $2
      lw $4, -8($30)
      lw $2, -4($30)
      jr $31

    Note: main function only needs to store $31 on the stack. The procedure is
    responsible for storing/loading used registers.

Assembling Programs

    Recall: The assembler does two passes - the first one is to build the symbol
    table, the second one is for assembling.

    Note: MIPS reference sheet will be provided on the exam.
    "Know how to convert to binary manually for the midterm!"

    Provide the hex notation for beq $20, $13, -4.

    0001 00ss ssst tttt iiii iiii iiii iiii
    s = $20 = 10100
    t = $13 = 01101
    i = -4 = 1111 1111 1111 1100

MERL Linking

    MERL format:
        Header:
            cookie 10000002
            filelen
            codelen + 12
        Code:
            ...
        Footer:
            REL
            ESR
            ESD
    
    Linking example:

        File A

            .import abc
            .word 0x18
            .word abc

        File B

            .export abc
            .export def
            .word def
            abc: def:

        (Headers and footers omitted.)

        Result (with header and footer):

            .word 0x10000002
            .word filelen
            .word codelen

            .word 0x18
            .word abc
            .word def
            abc: def:

            REL (0x1) 0x10
            REL (0x1) 0x14
            ESD 0x18, 0x3, d, e, f
            ESD 0x18, 0x3, a, b, c

    Note: Multiple uses of an imported label -> multiple ESR entries.
    Note: Format codes will be given to us on the exam.
    Note: REL entries required when we have '.word label' AND we know the
          address of the label.

DFAs

    Recall: Definition of a DFA
    
        SIGMA = alphabet (set of symbols used to form words)
        Q = set of all states (must be finite)
        q_0 = start state (in Q)
        A = set of accepting states; a subset of Q
        DELTA = QxSIGMA -> Q transition function
                "Q crossed with alphabet, produces Q"

    Definition of NFA (N stands for non-determinant):

        (same as DFAs, except...)
        DELTA: QxSIGMA -> 2^Q "produces some set of states"

    DFA problem:

        SIGMA = {0,1,2,3,4}
        L = {even integers with no useless leading zeros}

        S ->(Starting state) "Don't forget the initial arrow"
            0: Z
            1,3,: ODD
            2,4: E
        
        E ((accepting))
            0,2,4: loop back
            1,3: ODD

        ODD
            0,2,4: E
            1,3: loop back

        Z ((accepting))

    NFA problem:

        SIGMA = { a, b, c, d }
        L = { words that contain "cab" as a substring and end in "dad"}

        -> Starting state (loop on a,b,c,d)
         -> c
          -> a
           -> b
            -> intermediate (loop on a,b,c,d)
             -> d
              -> a
               -> d ((accepting))

        Note: Two trains of thought - either the NFA magically picks the right
        path after each input, or the NFA takes every possible path and keeps an
        eye out for an accepting state.

        Note: We can construct an equivalent DFA using subset construction.

    EPSILLON-NFA

        SIGMA = { a, b, c, d, 1, 2, 3, 4 }
        L = (DFA problem L) UNION (NFA problem L)

        -> starting state
         -> EPSILLON -> DFA
         -> EPSILLON -> NFA

        Recall: Every Every DFA is also an NFA.

Regular expressions

    SIGMA = {a,b,c}
    L = {words with an even number of a's}
    (b|c|a(b|c)*a)*

    SIGMA = {a,b,c}
    L = {all strings with 3 consecutive a's eventually followed by 4 consecutive
         b's}
    (a|b|c)*aaa(a|b|c)*bbbb(a|b|c)*

CFL

    Context-free Grammars:

        V: vocabulary (non-terminals) "intermediate tokens"
        SIGMA: terminals "characters that can appear in an input string"
        R: rules (productions)
        S: starting non-terminal

        (Where V, SIGMA, R are sets)

    Note: Production rules use single arrows!

    S -> AyxxA|xA
    A -> Ax|Ay|EPSILLON

    Find a string that is ambiguous in the above grammar.

        We need to show two different parse trees created with the same approach
        (as in, both need to be leftmost derivations or rightmost derivations).
        
        Notice how "AyxxA" stands out, as it is the only rule with two As. We
        have a choice of which to expand.

        Problem string: yxxyxx

        S
        |\\\\
        AyxxA
        |\  |
        Ax  e
        |\
        Ax
        |\
        Ay
        |
        e

        S
        |\\\\
        AyxxA
        |   |\
        e   Ax
            |\
            Ax
            |\
            Ay
            |
            e

    "Read off the leaves to get the resulting string."

Misc. Questions

    Do registers have an address?

        No. There is no address for a register.
