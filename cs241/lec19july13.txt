Recall:


int wain(int a, int b) { return a; }


sw $1, -4($30)
sw $2, -8($30)
lis $4
.word 8
sub $30, $30, $4
lw $30, $30, $4
lw $3, 4($30
add $30, $30, $4
fr $31


Symbol table:
Name Type Offset from $30
a    int  4    8
b    int  0    4
c    int    -> 0


Problem: Can't compute offsets until all decls have been seen, because $30 changes
with each decls.


int wain(int a, int b) { int c=0; return a; }
...
lw $3, 8($30)
...


Symbol table:
Name Type Offset from $30
a    int  8
b    int  4
c    int  0


Convenient time to introduce to conventions:
 - $4 contains 4
 - $29 points to the bottom of the stack frame (won't move - the bottom is the bottom)
 
  Note: Intel has bp/bbp "base pointer" or "frame pointer" pointing to the bottom of the stack frame for
  a constant offset.
  
 Now the example becomes:
 int waint(int a, int b) { return a; }
 lis $4
 .word 4
 ; recall: $30 points just past the end of memory
 ; what we call the "bottom" could be this initial $30 value, or one above
 sub $29, $30, 4 ; set up frame pointer to point at bottom element of stack
 sw $1, -4($30)
 sw $2, -8($30)
 se $0, -12($30)
 lis $5
 .word 12
 sub $30, $30, 5
 


       |
 29 -> |___
 30 -> 
  
 Becomes:
  
 29 -> | c
       | b
       |_a_
 30 ->
 
 
 And the symbol table is:
 Name Type Offset from $29
 a    int  0
 b    int  -4
 c    int  -8
 
 "Because we are computing offsets from the end of the stack, you can compute offsets
  reliably on-the-go."
 
 More complicated programs...
 
 int wain (int a, int b) { return a+b; }
 
 In general: for each grammar rule A -> GAMMA,
 build code(A) from code(GAMMA)
 
 Extend previous convention:
 Use $3 for "output" of all expressions.
 
 a+b  $3 <- eval(a)
      $3 <- eval(b)  // value of a is lost!
      $3 <- $3 + $3
      
Need a place to store pending computation.
Use a register:
code(a) ($3 <- a)
add $5, $3, $0 ($5 <- a)
code(b) ($3 <- a + b)
a + (b + c)
    code(a) ($3 <- a)
    add $5, $3, $0 ($5 <- a)
    code(b) ($3 <- b)
    add $6, $3, $0 ($6 <- b)
    code(c) ($3 <- c)
    add $3, $6, $3 ($3 <- b+c)
    add $3, $5, $3 ($3 <- a + (b+c))
   
The above code uses two additional registers.
Similarly, a + (b + (c + d)) would need 3 extra registers.
Eventually, we run out of registers.
More general solution: use a stack.
code(a) ($3 <- a)
push($3)
code(b) ($3 <- b)
push($3)
code(c) ($3 <- c)
push($3)
code(d) ($3 <- d)   // one extra register!
pop($5) ($5 <- c)
add $3, $5, $3 ($3 <- c + d)
pop($5) ($5 <- a)
add $3, $5, $3 ($3 <- a + (b + (c + d)))


In general: expr1 -> expr2 + term
code(expr1) = code(expr2)
            + push($3)
            + code(term)
            + pop($5)
            + add $3, $5, $3


Singleton rules: easy!
    "just copy it over"
    expr -> term
    code(expr) = code(term)


PrintLn(expr)
    Prints expr followed by newline.
    This is A2P6!
    
    Brief introduction of a runtime environment:


       A set of procedures supplied by the compiler (or the OS)
       to assist programs in their execution.
       
       e.g. msvcrt.dll "microsoft visual c runtime"
       
    Put procedure print in the runtime environment.
    We provide print.merl!
    
    ./wlp4gen < prog.wlp4i > prog.asm
    java cs241.linkasm < prog.asm > prog.merl
    linker prog.merl print.merl > exec.mips
    java mips.(twoints or array) exec.mips
    
    So, assume "print" is available - it takes input in $1.
    
    code(println(expr)) = code(expr) ($3 <- expr)
                        + add $1, $3, $0
                        + call print
                        
Assigment:
    stmt -> lvalue = expr
    For now, assume lvalue = ID (no pointers)
    
    stmt -> lvalue = expr
    code(stmt) = code(expr)
               + sw $3, _($29)  // _ = lookup ID in symbol table


What's left? If and while.
 - need boolean testing
 - suggestion: store 1 in $11, and store print in $10
 
Boilerplate code so far:
    ; prologue
    .import print
    lis $4
    lis $10
    .word print
    lis $11
    .word 1
    sub $29, $30, $4
    
    (put vars on stack)
    (your code)
    
    ; epilogue
    add $30, $29, $4
    jalr $31


Boolean tests:


    test -> expr1 < expr2
    code(test) = code(expr1) ($3 <- expr1)
               add $6, $3, $0 ; code generation for exprs only
               code(expr2) ($3 <- expr2)
               slt $3, $6, $3 ($3 <- expr1 < expr2)
    
    test -> expr1 > expr2
        (treat this as expr2 < expr1)
    
    "using register 5 would be dangerous, so use register 6"